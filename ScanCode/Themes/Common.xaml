<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:toolkit="http://schemas.xceed.com/wpf/xaml/toolkit"
    xmlns:res="clr-namespace:ScanCode.Properties">

    <Color x:Key="NormalTextColor">#4F4F4F</Color>
    <Color x:Key="Neutral">#F2F2F2</Color>
    <Color x:Key="Neutral2">#F0F3F5</Color>
    <Color x:Key="Neutral3">#ECECEE</Color>
    <Color x:Key="Neutral4">#D4D4D4</Color>
    <Color x:Key="Neutral5">#ADB3B7</Color>
    <Color x:Key="Neutral10">#FAFBFC</Color>
    <Color x:Key="Neutral30">#EBECF0</Color>
    <Color x:Key="Neutral100">#7A869A</Color>
    <Color x:Key="Invert">#FFFFFF</Color>
    <Color x:Key="B100">#4C9AFF</Color>
    <Color x:Key="R500">#ED1C24</Color>
    <Color x:Key="Clickable">#FFFFFFFF</Color>
    <Color x:Key="Gray1">#333333</Color>
    <Color x:Key="Icons">#828282</Color>

    <sys:Double x:Key="DefaultFontSize">14</sys:Double>
    <sys:Double x:Key="MediumFontSize">12</sys:Double>
    <SolidColorBrush x:Key="NormalTextColorBrush" Color="{StaticResource NormalTextColor}" />
    <SolidColorBrush x:Key="AccentColor" Color="{StaticResource R500}" />
    <SolidColorBrush x:Key="ExplaintText" Color="#8D9AA2" />
    <SolidColorBrush x:Key="SecondaryText" Color="#5C676F" />
    <SolidColorBrush x:Key="MainText" Color="#142834" />
    <SolidColorBrush x:Key="N3" Color="#ECECEE" />
    <SolidColorBrush x:Key="N70" Color="#A5ADBA" />
    <SolidColorBrush x:Key="BG/N10" Color="#EEEEEE" />
    <SolidColorBrush x:Key="B100Brush" Color="{StaticResource B100}"/>
    <SolidColorBrush x:Key="InnerBorder" Color="#DFE1E6" />
    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFFFFF" />

    <SolidColorBrush x:Key="NeutralBrush" Color="{StaticResource Neutral}" />
    <SolidColorBrush x:Key="Neutral2Brush" Color="{StaticResource Neutral2}" />
    <SolidColorBrush x:Key="Neutral3Brush" Color="{StaticResource Neutral3}"></SolidColorBrush>
    <SolidColorBrush x:Key="Neutral4Brush" Color="{StaticResource Neutral4}"></SolidColorBrush>
    <SolidColorBrush x:Key="Neutral5Brush" Color="{StaticResource Neutral5}"></SolidColorBrush>
    <SolidColorBrush x:Key="Neutral10Brush" Color="{StaticResource Neutral10}" />
    <SolidColorBrush x:Key="Neutral30Brush" Color="{StaticResource Neutral30}"></SolidColorBrush>
    <SolidColorBrush x:Key="Neutral100Brush" Color="{StaticResource Neutral100}" />
    <SolidColorBrush x:Key="ClickableBrush" Color="{StaticResource Clickable}"></SolidColorBrush>
    <SolidColorBrush x:Key="Gray1Brush" Color="{StaticResource Gray1}"></SolidColorBrush>
    <SolidColorBrush x:Key="IconsBrush" Color="{StaticResource Icons}"></SolidColorBrush>

    <Style x:Key="WindowCommandButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Margin" Value="10"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type mah:WindowButtonCommands}">
        <Setter Property="LightCloseButtonStyle" Value="{StaticResource WindowCommandButtonStyle}"/>
        <Setter Property="LightMaxButtonStyle" Value="{StaticResource WindowCommandButtonStyle}"/>
        <Setter Property="LightMinButtonStyle" Value="{StaticResource WindowCommandButtonStyle}"/>
    </Style>
    <Style x:Key="MetroWindowStyle" TargetType="{x:Type mah:MetroWindow}">
        <Setter Property="Title" Value="{x:Static res:Resources.Window_Title}" />
        <Setter Property="Width" Value="1080" />
        <Setter Property="Height" Value="800" />
        <Setter Property="TitlebarHeight" Value="32" />
        <Setter Property="GlowBrush" Value="{StaticResource Neutral100Brush}" />
        <Setter Property="TitleCharacterCasing" Value="Normal" />
        <Setter Property="TitleAlignment" Value="Center" />
        <Setter Property="WindowTitleBrush" Value="{StaticResource AccentColor}" />
        <Setter Property="NonActiveWindowTitleBrush" Value="{StaticResource AccentColor}" />
        <Setter Property="TitleTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Margin="0,3" VerticalAlignment="Center"
                        FontSize="12" FontWeight="Bold"
                        LineHeight="16" LineStackingStrategy="BlockLineHeight"
                        Foreground="White" Text="{Binding}"
                        TextTrimming="CharacterEllipsis" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="Heading20" TargetType="Label">
        <Setter Property="FontSize" Value="20" />
        <Setter Property="FontWeight" Value="Bold" />
    </Style>
    <Style x:Key="DialogLabelTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource MainText}"/>
        <Setter Property="FontWeight" Value="Medium"/>
    </Style>
    <Style x:Key="DialogCaptionTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="#172B4D"/>
        <Setter Property="FontSize" Value="20"/>
        <!--<Setter Property="FontWeight" Value="SemiBold"/>-->
        <Setter Property="LineHeight" Value="27"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
    </Style>
    <Style x:Key="DialogTextTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Foreground" Value="#172B4D"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="LineHeight" Value="22"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
    </Style>
    <Style x:Key="DialogCloseButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <DropShadowEffect x:Key="WindowShadowEffect" Direction="0" ShadowDepth="0"
                    Opacity="0.3" BlurRadius="8" Color="#091E42"/>
    <Style x:Key="WizardDialogWindowStyle" TargetType="{x:Type Window}">
        <Setter Property="Width" Value="500"/>
        <Setter Property="SizeToContent" Value="Height"/>
    </Style>
    <Style x:Key="DialogShadowBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="3.75"/>
        <Setter Property="Effect" Value="{DynamicResource WindowShadowEffect}"/>
    </Style>
    <Style x:Key="DialogShadowBorderInnerStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="3.75"/>
        <Setter Property="Margin" Value="5,1,5,8"/>
    </Style>
    <Style x:Key="TextBlockRightAlignedLabelStyle" TargetType="TextBlock">
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Right"/>
        <Setter Property="Margin" Value="5"/>
    </Style>
    <Style x:Key="ComboBoxGridCellStyle" TargetType="ComboBox">
        <Setter Property="Margin" Value="5"/>
    </Style>
    <Style x:Key="TextBoxGridCellStyle" TargetType="TextBox">
        <Setter Property="Margin" Value="5"/>
    </Style>
    <Style x:Key="TriggerDialogTabItemStyle" TargetType="{x:Type TabItem}">
        <Setter Property="Width" Value="160"/>
        <Setter Property="BorderBrush" Value="#ECECEE"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderBrush="#ECECEE" BorderThickness="0,0,0,1" Background="White">
                            <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" Margin="0,8" 
                                                HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                                                RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="mainBorder" Property="Background" Value="#FFF5F5"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="mainBorder" Property="BorderBrush" Value="#E21C24"/>
                            <Setter TargetName="mainBorder" Property="BorderThickness" Value="0,0,0,2"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <TextBlock Text="{Binding}">
                        <TextBlock.Style>
                            <Style TargetType="{x:Type TextBlock}">
                                <Setter Property="FontWeight" Value="Regular"/>
                                <Setter Property="Foreground" Value="#757575"/>
                                <Setter Property="FontSize" Value="14"/>
                                <Setter Property="LineHeight" Value="20"/>
                                <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource AncestorType={x:Type TabItem}}}" Value="True">
                                        <Setter Property="FontWeight" Value="SemiBold"/>
                                        <Setter Property="Foreground" Value="#222222"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </DataTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TriggerDialogLabelStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="LineHeight" Value="22"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Foreground" Value="{StaticResource MainText}"/>
    </Style>
    <Style x:Key="TriggerDialogTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Background" Value="{StaticResource Neutral10Brush}"/>
        <Setter Property="Foreground" Value="{StaticResource MainText}"/>
        <Setter Property="BorderBrush" Value="{StaticResource InnerBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border x:Name="border" Padding="10,12"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Background" Value="{StaticResource Neutral10Brush}"/>
                            <Setter Property="Foreground" Value="{StaticResource N70}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsKeyboardFocused" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{StaticResource Neutral30Brush}"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource B100Brush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="true"/>
                    <Condition Property="IsSelectionActive" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="{DynamicResource {x:Static SystemColors.InactiveSelectionHighlightBrushKey}}"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TriggerManageButtonBaseStyle" TargetType="{x:Type Button}">
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="12,6"/>
        <Setter Property="MinWidth" Value="80"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="TextBlock.LineHeight" Value="22"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" CornerRadius="3"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Cursor" Value="Hand"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="AlternateButtonStyle" TargetType="Button" BasedOn="{StaticResource TriggerManageButtonBaseStyle}">
        <Setter Property="Background" Value="#001952"/>
        <Setter Property="Foreground" Value="White"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ConfirmButtonStyle" TargetType="Button" BasedOn="{StaticResource TriggerManageButtonBaseStyle}">
        <Setter Property="Background" Value="#ED1C24"/>
        <Setter Property="Foreground" Value="White"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="CancelButtonStyle" TargetType="Button" BasedOn="{StaticResource TriggerManageButtonBaseStyle}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="#5C676F"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="TextBlock.TextDecorations" Value="Underline"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="TriggerManagerComboboxItemStyle" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" 
                            BorderThickness="0"
                            Background="{StaticResource Neutral10Brush}"
                            Padding="10,12" SnapsToDevicePixels="true">
                        <DockPanel LastChildFill="True">
                            <ContentControl x:Name="checkIcon" DockPanel.Dock="Right"
                                Margin="10,0,0,0" Content="{StaticResource ComboBoxSelectedItemIcon}" Visibility="Hidden"/>
                            <ContentPresenter DockPanel.Dock="Left"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                VerticalAlignment="Center"/>
                        </DockPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="#F5F5F5"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="#ECECEC"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Visibility" TargetName="checkIcon" Value="Visible"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TriggerManagerComboboxToggleButtonStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="ClickMode" Value="Press"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border x:Name="templateRoot" CornerRadius="3"
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}"
                            SnapsToDevicePixels="true">
                        <Border x:Name="splitBorder" 
                                Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"
                                SnapsToDevicePixels="true" HorizontalAlignment="Right"
                                BorderThickness="0">
                            <ContentControl Content="{StaticResource ComboBoxToggleButtonIcon}"
                                            VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="Regular"/>
        <Setter Property="TextBlock.LineHeight" Value="20"/>
        <Setter Property="TextBlock.LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="Foreground" Value="#172B4D"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="TriggerManagerComboBoxTemplate" TargetType="{x:Type ComboBox}">
        <Border x:Name="templateRoot" CornerRadius="3"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}">
            <Grid SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup"
                   AllowsTransparency="true" Grid.ColumnSpan="2"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                    <Border x:Name="dropDownBorder" Background="White"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                        Padding="0,4" CornerRadius="3"
                        BorderBrush="#4F091E42" BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
                <ToggleButton x:Name="toggleButton" 
                            Grid.ColumnSpan="2" 
                            Margin="0,0,10,0"
                            Background="{TemplateBinding Background}"
                            IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                            Style="{StaticResource TriggerManagerComboboxToggleButtonStyle}"/>
                <ContentPresenter x:Name="contentPresenter" Margin="10,12,40,12"
                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                              ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                              Content="{TemplateBinding SelectionBoxItem}"
                              ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                              HorizontalAlignment="Left"
                              IsHitTestVisible="false"
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              VerticalAlignment="Center"/>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="64"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="TriggerManagerComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
        <Border x:Name="templateRoot" CornerRadius="3"
                Background="{TemplateBinding Background}"
                BorderThickness="{TemplateBinding BorderThickness}" 
                BorderBrush="{TemplateBinding BorderBrush}">
            <Grid SnapsToDevicePixels="true">
                <Popup x:Name="PART_Popup"
                   AllowsTransparency="true"
                   IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                   Placement="Bottom">
                    <Border x:Name="dropDownBorder" Background="White"
                        MaxHeight="{TemplateBinding MaxDropDownHeight}"
                        MinWidth="{Binding ActualWidth, ElementName=templateRoot}"
                        Padding="0,4" CornerRadius="3"
                        BorderBrush="#4F091E42" BorderThickness="1">
                        <ScrollViewer x:Name="DropDownScrollViewer">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                    <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </Border>
                </Popup>
                <ToggleButton x:Name="toggleButton" Grid.Column="2"
                          HorizontalAlignment="Right" Margin="0,0,10,0"
                          BorderBrush="{TemplateBinding BorderBrush}" 
                          BorderThickness="{TemplateBinding BorderThickness}" 
                          Background="{TemplateBinding Background}" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                          Style="{StaticResource TriggerManagerComboboxToggleButtonStyle }"/>
                <Border x:Name="border" Margin="10,12,40,12"
                    Background="Transparent"
                    HorizontalAlignment="Left">
                    <TextBox x:Name="PART_EditableTextBox" VerticalAlignment="Center"
                         HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                         IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                         Style="{StaticResource ComboBoxEditableTextBox}"
                         VerticalContentAlignment="Center"/>
                </Border>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="HasItems" Value="false">
                <Setter Property="Height" TargetName="dropDownBorder" Value="64"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="TriggerManagerComboboxStyle" TargetType="{x:Type ComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource TriggerManagerComboboxItemStyle}"/>
        <Setter Property="Foreground" Value="#172B4D"/>
        <Setter Property="Background" Value="{StaticResource Neutral10Brush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource InnerBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template" Value="{StaticResource TriggerManagerComboBoxTemplate}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="false">
                <Setter Property="IsTabStop" Value="false"/>
            </Trigger>
            <Trigger Property="IsEditable" Value="true">
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Template" Value="{StaticResource TriggerManagerComboBoxEditableTemplate}"/>
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsEditable" Value="true"/>
                    <Condition Property="IsMouseOver" Value="true"/>
                    <Condition Property="IsKeyboardFocusWithin" Value="false"/>
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="#EBECF0"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="{x:Type toolkit:MessageBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <Border CornerRadius="2.25" Effect="{DynamicResource WindowShadowEffect}" BorderThickness="1">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="group1">
                                <VisualState x:Name="OK">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="OKCancel">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="YesNo">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="YesNoCancel">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton"
                                                   Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border CornerRadius="2.25" Background="White" MinWidth="400" Padding="0">
                            <StackPanel>
                                <StackPanel Background="{StaticResource NeutralBrush}" Orientation="Horizontal">
                                    <Image Source="{StaticResource DialogLogo}" Margin="16,4,7,0" Width="20" />
                                    <TextBlock Margin="0,7" Style="{StaticResource DialogCaptionTextBlockStyle}" Foreground="{StaticResource AccentColor}"
                                        Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Caption}"/>
                                </StackPanel>
                                <Border Padding="24,24,24,18">
                                    <StackPanel>
                                        <TextBlock Margin="0,0,0,16" Style="{StaticResource DialogTextTextBlockStyle}"
                                            Text="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Text}"/>
                                        <DockPanel LastChildFill="False">
                                            <Button x:Name="PART_YesButton" DockPanel.Dock="Right" Visibility="Collapsed"
                                        Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=YesButtonContent}"
                                        Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Button_Click}"
                                        Style="{DynamicResource ConfirmButtonStyle}"/>
                                            <Button x:Name="PART_NoButton" DockPanel.Dock="Right" Visibility="Collapsed" Margin="0,0,10,0"
                                        Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=NoButtonContent}"
                                        Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Button_Click}"
                                        Style="{DynamicResource CancelButtonStyle}"/>
                                            <Button x:Name="PART_OkButton" DockPanel.Dock="Right" Visibility="Collapsed"
                                        Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=OkButtonContent}"
                                        Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Button_Click}"
                                        Style="{DynamicResource ConfirmButtonStyle}"/>
                                            <Button x:Name="PART_CancelButton" DockPanel.Dock="Right" Visibility="Collapsed" Margin="0,0,10,0"
                                        Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=CancelButtonContent}"
                                        Command="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Button_Click}"
                                        Style="{DynamicResource CancelButtonStyle}"/>
                                        </DockPanel>
                                    </StackPanel>
                                </Border>
                                
                            </StackPanel>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="WindowBackground" Value="White" />
        <Setter Property="ButtonRegionBackground" Value="White" />
        <Setter Property="Background" Value="White" />

        <Setter Property="OkButtonStyle" Value="{StaticResource ConfirmButtonStyle}"/>
        <Setter Property="CancelButtonStyle" Value="{StaticResource CancelButtonStyle}"/>
        <Setter Property="YesButtonStyle" Value="{StaticResource ConfirmButtonStyle}"/>
        <Setter Property="NoButtonStyle" Value="{StaticResource CancelButtonStyle}"/>
        <Setter Property="Border.CornerRadius" Value="3.75" />
        <Setter Property="YesButtonContent" Value="{x:Static res:Resources.MessageBox_YesLabel}"/>
        <Setter Property="NoButtonContent" Value="{x:Static res:Resources.MessageBox_NoLabel}"/>
        <Setter Property="CancelButtonContent" Value="{x:Static res:Resources.MessageBox_CancelLabel}"/>
    </Style>

    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="ToggleButton">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="20" />
            </Grid.ColumnDefinitions>
            <Border
                    x:Name="Border" 
                    Grid.ColumnSpan="2"
                    CornerRadius="2"
                    Background="{DynamicResource Neutral10Brush}"
                    BorderBrush="{DynamicResource InnerBorder}"
                    BorderThickness="1" />
            <Path 
                    x:Name="Arrow"
                    Grid.Column="1"     
                    Fill="{DynamicResource MainText}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Data="M0,0 L0,2 L4,6 L8,2 L8,0 L4,4 z" />
        </Grid>
        <ControlTemplate.Triggers>
            <!--<Trigger Property="ToggleButton.IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="{StaticResource DarkBrush}" />
                </Trigger>-->
            <Trigger Property="ToggleButton.IsChecked" Value="true">
                <Setter TargetName="Border" Property="BorderBrush" Value="#04B3FF" />
                <Setter TargetName="Border" Property="BorderThickness" Value="2" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter TargetName="Border" Property="Background" Value="{DynamicResource N3}" />
                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource InnerBorder}" />
                <Setter Property="Foreground" Value="{DynamicResource N70}"/>
                <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource N70}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="QuangComboBoxItem" TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <!--<Setter Property="Height" Value="40"/>-->
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border Name="Border"
                              Padding="6"
                              SnapsToDevicePixels="true">
                        <ContentPresenter />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsHighlighted" Value="true">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource BG/N10}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#888888"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="QuangComboBox" TargetType="ComboBox">
        <Setter Property="Foreground" Value="{DynamicResource MainText}"/>
        <Setter Property="Height" Value="40"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="SnapsToDevicePixels" Value="true"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource QuangComboBoxItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton 
                                Name="ToggleButton" 
                                Template="{StaticResource ComboBoxToggleButton}" 
                                Grid.Column="2" 
                                Focusable="false"
                                IsChecked="{Binding Path=IsDropDownOpen,Mode=TwoWay,RelativeSource={RelativeSource TemplatedParent}}"
                                ClickMode="Press">
                        </ToggleButton>
                        <ContentPresenter
                                Name="ContentSite"
                                IsHitTestVisible="False" 
                                Content="{TemplateBinding SelectionBoxItem}"
                                ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                Margin="8,1,23,3"
                                VerticalAlignment="Center"
                                HorizontalAlignment="Left" />
                        <Popup 
                                Name="Popup"
                                Placement="Bottom"
                                IsOpen="{TemplateBinding IsDropDownOpen}"
                                AllowsTransparency="True" 
                                Focusable="False"
                                PopupAnimation="Slide">
                            <Grid 
                                    Name="DropDown"
                                    SnapsToDevicePixels="True"                
                                    MinWidth="{TemplateBinding ActualWidth}"
                                    MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border 
                                        x:Name="DropDownBorder"
                                        Background="{DynamicResource WindowBackgroundBrush}"
                                        BorderThickness="1"
                                        BorderBrush="{DynamicResource InnerBorder}">
                                </Border>
                                <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource N70}"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="true">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEditable" Value="true">
                            <Setter Property="IsTabStop" Value="false"/>
                            <Setter TargetName="ContentSite" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RequiredLabelStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource AccentColor}"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
    </Style>

    <Style x:Key="LeftStackStyle" TargetType="StackPanel">
        <Setter Property="Margin" Value="0,0,20,0"></Setter>
    </Style>

    <DataTemplate x:Key="TriggerDialogTitleTemplate">
        <TextBlock Margin="4,0,0,0" VerticalAlignment="Center"
            FontSize="12" FontWeight="SemiBold"
            LineHeight="16" LineStackingStrategy="BlockLineHeight"
            Foreground="{StaticResource AccentColor}" Text="{Binding}"
            TextTrimming="CharacterEllipsis" />
    </DataTemplate>
    
    <DataTemplate x:Key="TriggerDialogLogoTemplate">
        <Image VerticalAlignment="Center" Margin="16,7,4,7" Source="{StaticResource DialogLogo}"/>
    </DataTemplate>
</ResourceDictionary>